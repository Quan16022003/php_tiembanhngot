{% set page = 'dashboard' %}
{% extends './layout.twig' %}
{% block content %}
    <div class="container">
        <h1 class="mt-5">Thống kê top sản phẩm theo tuần</h1>

        <form class="mt-3 mb-3" action="" method="get">
            <div class="row">
                <div class="col-auto">
                    <label for="year">Chọn năm:</label>
                    <select name="year" id="year" class="form-select">
                        {% for year in years %}
                            <option value="{{ year }}">{{ year }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-auto">
                    <label for="week">Chọn tuần:</label>
                    <select name="week" id="week" class="form-select">

                    </select>
                </div>
                <div class="col-auto">
                    <button type="submit" class="btn btn-primary mt-4">Xem</button>
                </div>
            </div>
        </form>

        {% if topProducts is defined %}
            <h2>Các sản phẩm bán chạy nhất</h2>
            <ul class="list-group">
                {% for product in topProducts %}
                    <li class="list-group-item">{{ product.name }} - Số lượng bán: {{ product.total_sold }}</li>
                {% endfor %}
            </ul>
        {% endif %}
    </div>
    <div class="chart">
        <canvas id="myChart" width="100" height="100"></canvas>

    </div>


{% endblock %}
{% block scripts %}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Xử lý sự kiện khi người dùng ấn nút "Xem"
        document.querySelector('button[type="submit"]').addEventListener('click', function () {
            // Lưu giá trị của dropdown vào sessionStorage
            sessionStorage.setItem('selectedYear', yearSelect.value);
            sessionStorage.setItem('selectedWeek', weekSelect.value);
        });

        // Lấy thẻ select của năm và tuần
        const yearSelect = document.getElementById('year');
        const weekSelect = document.getElementById('week');
        // Lấy giá trị đã chọn từ sessionStorage
        const selectedYear = sessionStorage.getItem('selectedYear');
        const selectedWeek = sessionStorage.getItem('selectedWeek');

        // Nếu có giá trị đã chọn từ trước, thiết lập lại giá trị cho dropdown
        if (selectedYear) {
            yearSelect.value = selectedYear;
        }
        if (selectedWeek) {
            weekSelect.value = selectedWeek;
        }
        // Xử lý sự kiện khi người dùng thay đổi năm
        yearSelect.addEventListener('change', function () {
            const selectedYear = this.value;
            weekSelect.innerHTML = ''; // Xóa các tùy chọn tuần hiện có

            const allWeeksOption = document.createElement('option');
            allWeeksOption.value = 'all';
            allWeeksOption.textContent = 'Tất cả các tuần';
            weekSelect.appendChild(allWeeksOption);

            // Tính toán và thêm các tuần của năm được chọn vào dropdown
            for (let week = 1; week <= 52; week++) {
                const startDate = new Date(selectedYear, 0, 1 + (week - 1) * 7);
                const endDate = new Date(selectedYear, 0, 1 + (week - 1) * 7 + 6);
                const option = document.createElement('option');
                option.value = startDate.toLocaleDateString() + '|' + endDate.toLocaleDateString();
                option.textContent = `Tuần ${week}: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`;
                weekSelect.appendChild(option);
            }
        });

        // Kích hoạt sự kiện change khi trang được tải lần đầu
        yearSelect.dispatchEvent(new Event('change'));

        // Xử lý sự kiện khi người dùng chọn tuần
        weekSelect.addEventListener('change', function () {
            const selectedWeek = this.value.split('|');
            const startDate = selectedWeek[0];
            const endDate = selectedWeek[1];

            // Gửi yêu cầu AJAX tới server
            $.ajax({
                url: 'admin/dashboard', // Thay đổi đường dẫn tới controller của bạn
                method: 'POST', // Hoặc 'GET' nếu bạn muốn sử dụng phương thức GET
                data: {
                    startDate: startDate,
                    endDate: endDate
                },
                dataType: 'json',
                success: function (data) {
                    // Xử lý phản hồi từ server và cập nhật giao diện người dùng
                    updateChart(data);
                },
                error: function (xhr, status, error) {
                    console.log('Error:', error);
                }
            });
        });
    </script>
    <script>
        const topProductsData = {{ totalSoldByType | json_encode | raw }};
        console.log(topProductsData)
        // Khởi tạo biểu đồ tròn
        const ctx = document.getElementById('myChart').getContext('2d');
        const myChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(topProductsData).map(id => topProductsData[id].name), // Sử dụng tên sản phẩm từ dữ liệu controller
                datasets: [{
                    label: 'Số lượng đã bán:',
                    data: Object.values(topProductsData).map(product => product.total_sold), // Sử dụng số lượng bán được của từng sản phẩm từ dữ liệu controller
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                // Cấu hình thêm nếu cần
            }
        });
    </script>

{% endblock %}