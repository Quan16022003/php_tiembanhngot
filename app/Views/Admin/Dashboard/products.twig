{% set page = 'dashboard/products' %}
{% extends './layout.twig' %}
{% block content %}
    <div class="container">
        <form class="mt-3 mb-3" action="" method="get">
            <div class="row">
                <div class="col-auto">
                    <label for="start_date">Chọn ngày bắt đầu:</label>
                    <input type="date" name="start_date" id="start_date" class="form-control" value="{{ startDate }}">
                </div>

                <div class="col-auto">
                    <label for="end_date">Chọn ngày kết thúc:</label>
                    <input type="date" name="end_date" id="end_date" class="form-control" value="{{ endDate }}">
                </div>

                <div class="col-auto">
                    <label for="categories">Categories:</label>
                    <select name="categories" id="categories" class="form-select">
                        <option value="all" {% if selectedCategory == null %}selected{% endif %}>All Categories
                        </option>
                        {% for category in categories %}
                            <option value="{{ category.id }}"
                                    {% if selectedCategory == category.id %}selected{% endif %}>{{ category.name }}</option>
                        {% endfor %}
                    </select>
                </div>

                <div class="col-auto">
                    <button type="submit" class="btn btn-primary mt-4">Xem</button>
                </div>
            </div>
        </form>

        {% if totalSoldByType is defined %}
            <h2>Các sản phẩm bán chạy nhất</h2>
            <ul class="list-group" id="productList">
                {% set totalRevenue = 0 %}
                {% for product in totalSoldByType %}
                    {% set revenue = product.price * product.total_sold * 1000 %}
                    {% set totalRevenue = totalRevenue + revenue %}
                    <li class="list-group-item">
                        {{ product.name }} - Số lượng bán: {{ product.total_sold }} - Doanh
                        thu: {{ revenue | number_format }}đ
                    </li>
                {% endfor %}
            </ul>
            <h2>Tổng doanh thu: {{ totalRevenue | number_format }}đ</h2>
        {% endif %}
    </div>
    <div class="chart">
        <canvas id="myChart" width="100" height="100"></canvas>
    </div>
{% endblock %}
{% block scripts %}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const startDateInput = document.getElementById('start_date');
            const endDateInput = document.getElementById('end_date');
            const categorySelect = document.getElementById('categories');
            const filterForm = document.getElementById('filterForm');
            const productList = document.getElementById('productList');

            // Khôi phục các giá trị đã lưu từ sessionStorage
            startDateInput.value = sessionStorage.getItem('start_date') || '';
            endDateInput.value = sessionStorage.getItem('end_date') || '';
            categorySelect.value = sessionStorage.getItem('categories') || '';

            function updateProductList(products) {
                productList.innerHTML = '';
                for (const [productId, product] of Object.entries(products)) {
                    const listItem = document.createElement('li');
                    listItem.className = 'list-group-item';
                    listItem.textContent = `${product.name} - Số lượng bán: ${product.total_sold}`;
                    productList.appendChild(listItem);
                }
            }

            function sendAjaxRequest() {
                // Lưu các giá trị vào sessionStorage
                sessionStorage.setItem('start_date', startDateInput.value);
                sessionStorage.setItem('end_date', endDateInput.value);
                sessionStorage.setItem('categories', categorySelect.value);

                const formData = new FormData(filterForm);

                fetch('your_controller_method_url', {
                    method: 'GET',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        updateProductList(data.totalSoldByType);
                    })
                    .catch(error => console.error('Error:', error));
            }

            startDateInput.addEventListener('change', sendAjaxRequest);
            endDateInput.addEventListener('change', sendAjaxRequest);
            categorySelect.addEventListener('change', sendAjaxRequest);
        });

        const topProductsData = {{ totalSoldByType | json_encode | raw }};
        // Khởi tạo biểu đồ tròn
        const ctx = document.getElementById('myChart').getContext('2d');
        const myChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(topProductsData).map(id => topProductsData[id].name),
                datasets: [{
                    label: 'Số lượng đã bán:',
                    data: Object.values(topProductsData).map(product => product.total_sold),
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                // Cấu hình thêm nếu cần
            }
        });
    </script>
{% endblock %}

